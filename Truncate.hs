module Main where

import Control.Monad (when)
import Data.ByteString.Lazy (ByteString)
import qualified Data.ByteString.Lazy as BS
import System.Environment (getArgs)

minimalPNG :: ByteString
minimalPNG = BS.pack
  [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
   0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
   0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
   0x08, 0x04, 0x00, 0x00, 0x00, 0xb5, 0x1c, 0x0c,
   0x02, 0x00, 0x00, 0x00, 0x0b, 0x49, 0x44, 0x41,
   0x54, 0x18, 0x57, 0x63, 0x60, 0x60, 0x00, 0x00,
   0x00, 0x03, 0x00, 0x01, 0x68, 0x26, 0x59, 0x0d,
   0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
   0xae, 0x42, 0x60, 0x82]

magicPNG :: ByteString
magicPNG = BS.take 8 minimalPNG

truncatePNG :: FilePath -> IO Bool
truncatePNG fp =
  do isPNG <- BS.isPrefixOf magicPNG <$> BS.readFile fp
     when isPNG $ BS.writeFile fp minimalPNG
     return isPNG

main :: IO ()
main = getArgs >>= mapM truncatePNG >>= print
